/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee, Coin } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, GetStocksResponse, Stock, GetBidByIdResponse, Bid, GetBidsResponse, GetMinimumBidPriceResponse, GetShareByIdResponse, Share, GetSharesResponse, GetStockByIdResponse } from "./InfluencerStocks.types";
import { InfluencerStocksQueryClient, InfluencerStocksClient } from "./InfluencerStocks.client";
export const influencerStocksQueryKeys = {
  contract: ([{
    contract: "influencerStocks"
  }] as const),
  address: (contractAddress: string | undefined) => ([{
    ...influencerStocksQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  getStockById: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_stock_by_id",
    args
  }] as const),
  getAllStocks: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_all_stocks",
    args
  }] as const),
  getStocksByInfluencer: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_stocks_by_influencer",
    args
  }] as const),
  getActiveAuctions: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_active_auctions",
    args
  }] as const),
  getExpiredActiveAuctions: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_expired_active_auctions",
    args
  }] as const),
  getBidsByBidder: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_bids_by_bidder",
    args
  }] as const),
  getOpenBidsByStock: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_open_bids_by_stock",
    args
  }] as const),
  getBidsByStock: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_bids_by_stock",
    args
  }] as const),
  getBidById: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_bid_by_id",
    args
  }] as const),
  getMinimumBidPrice: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_minimum_bid_price",
    args
  }] as const),
  getSharesByStock: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_shares_by_stock",
    args
  }] as const),
  getSharesByOwner: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_shares_by_owner",
    args
  }] as const),
  getShareById: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{
    ...influencerStocksQueryKeys.address(contractAddress)[0],
    method: "get_share_by_id",
    args
  }] as const)
};
export const influencerStocksQueries = {
  getStockById: <TData = GetStockByIdResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetStockByIdQuery<TData>): UseQueryOptions<GetStockByIdResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getStockById(client?.contractAddress, args),
    queryFn: () => client ? client.getStockById({
      stockId: args.stockId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getAllStocks: <TData = GetStocksResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetAllStocksQuery<TData>): UseQueryOptions<GetStocksResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getAllStocks(client?.contractAddress, args),
    queryFn: () => client ? client.getAllStocks({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getStocksByInfluencer: <TData = GetStocksResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetStocksByInfluencerQuery<TData>): UseQueryOptions<GetStocksResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getStocksByInfluencer(client?.contractAddress, args),
    queryFn: () => client ? client.getStocksByInfluencer({
      influencer: args.influencer,
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getActiveAuctions: <TData = GetStocksResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetActiveAuctionsQuery<TData>): UseQueryOptions<GetStocksResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getActiveAuctions(client?.contractAddress, args),
    queryFn: () => client ? client.getActiveAuctions({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getExpiredActiveAuctions: <TData = GetStocksResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetExpiredActiveAuctionsQuery<TData>): UseQueryOptions<GetStocksResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getExpiredActiveAuctions(client?.contractAddress, args),
    queryFn: () => client ? client.getExpiredActiveAuctions({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBidsByBidder: <TData = GetBidsResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetBidsByBidderQuery<TData>): UseQueryOptions<GetBidsResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getBidsByBidder(client?.contractAddress, args),
    queryFn: () => client ? client.getBidsByBidder({
      bidder: args.bidder,
      isActive: args.isActive,
      isOpen: args.isOpen,
      stockId: args.stockId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getOpenBidsByStock: <TData = GetBidsResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetOpenBidsByStockQuery<TData>): UseQueryOptions<GetBidsResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getOpenBidsByStock(client?.contractAddress, args),
    queryFn: () => client ? client.getOpenBidsByStock({
      stockId: args.stockId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBidsByStock: <TData = GetBidsResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetBidsByStockQuery<TData>): UseQueryOptions<GetBidsResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getBidsByStock(client?.contractAddress, args),
    queryFn: () => client ? client.getBidsByStock({
      stockId: args.stockId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getBidById: <TData = GetBidByIdResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetBidByIdQuery<TData>): UseQueryOptions<GetBidByIdResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getBidById(client?.contractAddress, args),
    queryFn: () => client ? client.getBidById({
      bidId: args.bidId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getMinimumBidPrice: <TData = GetMinimumBidPriceResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetMinimumBidPriceQuery<TData>): UseQueryOptions<GetMinimumBidPriceResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getMinimumBidPrice(client?.contractAddress, args),
    queryFn: () => client ? client.getMinimumBidPrice({
      sharesRequested: args.sharesRequested,
      stockId: args.stockId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getSharesByStock: <TData = GetSharesResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetSharesByStockQuery<TData>): UseQueryOptions<GetSharesResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getSharesByStock(client?.contractAddress, args),
    queryFn: () => client ? client.getSharesByStock({
      stockId: args.stockId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getSharesByOwner: <TData = GetSharesResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetSharesByOwnerQuery<TData>): UseQueryOptions<GetSharesResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getSharesByOwner(client?.contractAddress, args),
    queryFn: () => client ? client.getSharesByOwner({
      owner: args.owner
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }),
  getShareById: <TData = GetShareByIdResponse,>({
    client,
    args,
    options
  }: InfluencerStocksGetShareByIdQuery<TData>): UseQueryOptions<GetShareByIdResponse, Error, TData> => ({
    queryKey: influencerStocksQueryKeys.getShareById(client?.contractAddress, args),
    queryFn: () => client ? client.getShareById({
      shareId: args.shareId
    }) : Promise.reject(new Error("Invalid client")),
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  })
};
export interface InfluencerStocksReactQuery<TResponse, TData = TResponse> {
  client: InfluencerStocksQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface InfluencerStocksGetShareByIdQuery<TData> extends InfluencerStocksReactQuery<GetShareByIdResponse, TData> {
  args: {
    shareId: number;
  };
}
export function useInfluencerStocksGetShareByIdQuery<TData = GetShareByIdResponse>({
  client,
  args,
  options
}: InfluencerStocksGetShareByIdQuery<TData>) {
  return useQuery<GetShareByIdResponse, Error, TData>(influencerStocksQueryKeys.getShareById(client?.contractAddress, args), () => client ? client.getShareById({
    shareId: args.shareId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetSharesByOwnerQuery<TData> extends InfluencerStocksReactQuery<GetSharesResponse, TData> {
  args: {
    owner: Addr;
  };
}
export function useInfluencerStocksGetSharesByOwnerQuery<TData = GetSharesResponse>({
  client,
  args,
  options
}: InfluencerStocksGetSharesByOwnerQuery<TData>) {
  return useQuery<GetSharesResponse, Error, TData>(influencerStocksQueryKeys.getSharesByOwner(client?.contractAddress, args), () => client ? client.getSharesByOwner({
    owner: args.owner
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetSharesByStockQuery<TData> extends InfluencerStocksReactQuery<GetSharesResponse, TData> {
  args: {
    stockId: number;
  };
}
export function useInfluencerStocksGetSharesByStockQuery<TData = GetSharesResponse>({
  client,
  args,
  options
}: InfluencerStocksGetSharesByStockQuery<TData>) {
  return useQuery<GetSharesResponse, Error, TData>(influencerStocksQueryKeys.getSharesByStock(client?.contractAddress, args), () => client ? client.getSharesByStock({
    stockId: args.stockId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetMinimumBidPriceQuery<TData> extends InfluencerStocksReactQuery<GetMinimumBidPriceResponse, TData> {
  args: {
    sharesRequested: number;
    stockId: number;
  };
}
export function useInfluencerStocksGetMinimumBidPriceQuery<TData = GetMinimumBidPriceResponse>({
  client,
  args,
  options
}: InfluencerStocksGetMinimumBidPriceQuery<TData>) {
  return useQuery<GetMinimumBidPriceResponse, Error, TData>(influencerStocksQueryKeys.getMinimumBidPrice(client?.contractAddress, args), () => client ? client.getMinimumBidPrice({
    sharesRequested: args.sharesRequested,
    stockId: args.stockId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetBidByIdQuery<TData> extends InfluencerStocksReactQuery<GetBidByIdResponse, TData> {
  args: {
    bidId: number;
  };
}
export function useInfluencerStocksGetBidByIdQuery<TData = GetBidByIdResponse>({
  client,
  args,
  options
}: InfluencerStocksGetBidByIdQuery<TData>) {
  return useQuery<GetBidByIdResponse, Error, TData>(influencerStocksQueryKeys.getBidById(client?.contractAddress, args), () => client ? client.getBidById({
    bidId: args.bidId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetBidsByStockQuery<TData> extends InfluencerStocksReactQuery<GetBidsResponse, TData> {
  args: {
    stockId: number;
  };
}
export function useInfluencerStocksGetBidsByStockQuery<TData = GetBidsResponse>({
  client,
  args,
  options
}: InfluencerStocksGetBidsByStockQuery<TData>) {
  return useQuery<GetBidsResponse, Error, TData>(influencerStocksQueryKeys.getBidsByStock(client?.contractAddress, args), () => client ? client.getBidsByStock({
    stockId: args.stockId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetOpenBidsByStockQuery<TData> extends InfluencerStocksReactQuery<GetBidsResponse, TData> {
  args: {
    stockId: number;
  };
}
export function useInfluencerStocksGetOpenBidsByStockQuery<TData = GetBidsResponse>({
  client,
  args,
  options
}: InfluencerStocksGetOpenBidsByStockQuery<TData>) {
  return useQuery<GetBidsResponse, Error, TData>(influencerStocksQueryKeys.getOpenBidsByStock(client?.contractAddress, args), () => client ? client.getOpenBidsByStock({
    stockId: args.stockId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetBidsByBidderQuery<TData> extends InfluencerStocksReactQuery<GetBidsResponse, TData> {
  args: {
    bidder: Addr;
    isActive?: boolean;
    isOpen?: boolean;
    stockId?: number;
  };
}
export function useInfluencerStocksGetBidsByBidderQuery<TData = GetBidsResponse>({
  client,
  args,
  options
}: InfluencerStocksGetBidsByBidderQuery<TData>) {
  return useQuery<GetBidsResponse, Error, TData>(influencerStocksQueryKeys.getBidsByBidder(client?.contractAddress, args), () => client ? client.getBidsByBidder({
    bidder: args.bidder,
    isActive: args.isActive,
    isOpen: args.isOpen,
    stockId: args.stockId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetExpiredActiveAuctionsQuery<TData> extends InfluencerStocksReactQuery<GetStocksResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useInfluencerStocksGetExpiredActiveAuctionsQuery<TData = GetStocksResponse>({
  client,
  args,
  options
}: InfluencerStocksGetExpiredActiveAuctionsQuery<TData>) {
  return useQuery<GetStocksResponse, Error, TData>(influencerStocksQueryKeys.getExpiredActiveAuctions(client?.contractAddress, args), () => client ? client.getExpiredActiveAuctions({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetActiveAuctionsQuery<TData> extends InfluencerStocksReactQuery<GetStocksResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useInfluencerStocksGetActiveAuctionsQuery<TData = GetStocksResponse>({
  client,
  args,
  options
}: InfluencerStocksGetActiveAuctionsQuery<TData>) {
  return useQuery<GetStocksResponse, Error, TData>(influencerStocksQueryKeys.getActiveAuctions(client?.contractAddress, args), () => client ? client.getActiveAuctions({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetStocksByInfluencerQuery<TData> extends InfluencerStocksReactQuery<GetStocksResponse, TData> {
  args: {
    influencer: Addr;
    limit?: number;
    startAfter?: number;
  };
}
export function useInfluencerStocksGetStocksByInfluencerQuery<TData = GetStocksResponse>({
  client,
  args,
  options
}: InfluencerStocksGetStocksByInfluencerQuery<TData>) {
  return useQuery<GetStocksResponse, Error, TData>(influencerStocksQueryKeys.getStocksByInfluencer(client?.contractAddress, args), () => client ? client.getStocksByInfluencer({
    influencer: args.influencer,
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetAllStocksQuery<TData> extends InfluencerStocksReactQuery<GetStocksResponse, TData> {
  args: {
    limit?: number;
    startAfter?: number;
  };
}
export function useInfluencerStocksGetAllStocksQuery<TData = GetStocksResponse>({
  client,
  args,
  options
}: InfluencerStocksGetAllStocksQuery<TData>) {
  return useQuery<GetStocksResponse, Error, TData>(influencerStocksQueryKeys.getAllStocks(client?.contractAddress, args), () => client ? client.getAllStocks({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksGetStockByIdQuery<TData> extends InfluencerStocksReactQuery<GetStockByIdResponse, TData> {
  args: {
    stockId: number;
  };
}
export function useInfluencerStocksGetStockByIdQuery<TData = GetStockByIdResponse>({
  client,
  args,
  options
}: InfluencerStocksGetStockByIdQuery<TData>) {
  return useQuery<GetStockByIdResponse, Error, TData>(influencerStocksQueryKeys.getStockById(client?.contractAddress, args), () => client ? client.getStockById({
    stockId: args.stockId
  }) : Promise.reject(new Error("Invalid client")), {
    ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface InfluencerStocksPlaceBidMutation {
  client: InfluencerStocksClient;
  msg: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useInfluencerStocksPlaceBidMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, InfluencerStocksPlaceBidMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, InfluencerStocksPlaceBidMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.placeBid(msg, fee, memo, funds), options);
}
export interface InfluencerStocksEndAuctionMutation {
  client: InfluencerStocksClient;
  msg: {
    stockId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useInfluencerStocksEndAuctionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, InfluencerStocksEndAuctionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, InfluencerStocksEndAuctionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.endAuction(msg, fee, memo, funds), options);
}
export interface InfluencerStocksStartAuctionMutation {
  client: InfluencerStocksClient;
  msg: {
    stockId: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useInfluencerStocksStartAuctionMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, InfluencerStocksStartAuctionMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, InfluencerStocksStartAuctionMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.startAuction(msg, fee, memo, funds), options);
}
export interface InfluencerStocksCreateStockMutation {
  client: InfluencerStocksClient;
  msg: {
    ticker: string;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useInfluencerStocksCreateStockMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, InfluencerStocksCreateStockMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, InfluencerStocksCreateStockMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createStock(msg, fee, memo, funds), options);
}