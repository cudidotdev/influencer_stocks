/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, GetStocksResponse, Stock, GetBidByIdResponse, Bid, GetBidsResponse, GetMinimumBidPriceResponse, GetShareByIdResponse, Share, GetSharesResponse, GetStockByIdResponse } from "./InfluencerStocks.types";
export interface InfluencerStocksReadOnlyInterface {
  contractAddress: string;
  getStockById: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetStockByIdResponse>;
  getAllStocks: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<GetStocksResponse>;
  getStocksByInfluencer: ({
    influencer,
    limit,
    startAfter
  }: {
    influencer: Addr;
    limit?: number;
    startAfter?: number;
  }) => Promise<GetStocksResponse>;
  getActiveAuctions: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<GetStocksResponse>;
  getExpiredActiveAuctions: ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }) => Promise<GetStocksResponse>;
  getBidsByBidder: ({
    bidder,
    isActive,
    isOpen,
    stockId
  }: {
    bidder: Addr;
    isActive?: boolean;
    isOpen?: boolean;
    stockId?: number;
  }) => Promise<GetBidsResponse>;
  getOpenBidsByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetBidsResponse>;
  getBidsByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetBidsResponse>;
  getBidById: ({
    bidId
  }: {
    bidId: number;
  }) => Promise<GetBidByIdResponse>;
  getMinimumBidPrice: ({
    sharesRequested,
    stockId
  }: {
    sharesRequested: number;
    stockId: number;
  }) => Promise<GetMinimumBidPriceResponse>;
  getSharesByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetSharesResponse>;
  getSharesByOwner: ({
    owner
  }: {
    owner: Addr;
  }) => Promise<GetSharesResponse>;
  getShareById: ({
    shareId
  }: {
    shareId: number;
  }) => Promise<GetShareByIdResponse>;
}
export class InfluencerStocksQueryClient implements InfluencerStocksReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getStockById = this.getStockById.bind(this);
    this.getAllStocks = this.getAllStocks.bind(this);
    this.getStocksByInfluencer = this.getStocksByInfluencer.bind(this);
    this.getActiveAuctions = this.getActiveAuctions.bind(this);
    this.getExpiredActiveAuctions = this.getExpiredActiveAuctions.bind(this);
    this.getBidsByBidder = this.getBidsByBidder.bind(this);
    this.getOpenBidsByStock = this.getOpenBidsByStock.bind(this);
    this.getBidsByStock = this.getBidsByStock.bind(this);
    this.getBidById = this.getBidById.bind(this);
    this.getMinimumBidPrice = this.getMinimumBidPrice.bind(this);
    this.getSharesByStock = this.getSharesByStock.bind(this);
    this.getSharesByOwner = this.getSharesByOwner.bind(this);
    this.getShareById = this.getShareById.bind(this);
  }
  getStockById = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetStockByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_stock_by_id: {
        stock_id: stockId
      }
    });
  };
  getAllStocks = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<GetStocksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_stocks: {
        limit,
        start_after: startAfter
      }
    });
  };
  getStocksByInfluencer = async ({
    influencer,
    limit,
    startAfter
  }: {
    influencer: Addr;
    limit?: number;
    startAfter?: number;
  }): Promise<GetStocksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_stocks_by_influencer: {
        influencer,
        limit,
        start_after: startAfter
      }
    });
  };
  getActiveAuctions = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<GetStocksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_active_auctions: {
        limit,
        start_after: startAfter
      }
    });
  };
  getExpiredActiveAuctions = async ({
    limit,
    startAfter
  }: {
    limit?: number;
    startAfter?: number;
  }): Promise<GetStocksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_expired_active_auctions: {
        limit,
        start_after: startAfter
      }
    });
  };
  getBidsByBidder = async ({
    bidder,
    isActive,
    isOpen,
    stockId
  }: {
    bidder: Addr;
    isActive?: boolean;
    isOpen?: boolean;
    stockId?: number;
  }): Promise<GetBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bids_by_bidder: {
        bidder,
        is_active: isActive,
        is_open: isOpen,
        stock_id: stockId
      }
    });
  };
  getOpenBidsByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_open_bids_by_stock: {
        stock_id: stockId
      }
    });
  };
  getBidsByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bids_by_stock: {
        stock_id: stockId
      }
    });
  };
  getBidById = async ({
    bidId
  }: {
    bidId: number;
  }): Promise<GetBidByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bid_by_id: {
        bid_id: bidId
      }
    });
  };
  getMinimumBidPrice = async ({
    sharesRequested,
    stockId
  }: {
    sharesRequested: number;
    stockId: number;
  }): Promise<GetMinimumBidPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_minimum_bid_price: {
        shares_requested: sharesRequested,
        stock_id: stockId
      }
    });
  };
  getSharesByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetSharesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_shares_by_stock: {
        stock_id: stockId
      }
    });
  };
  getSharesByOwner = async ({
    owner
  }: {
    owner: Addr;
  }): Promise<GetSharesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_shares_by_owner: {
        owner
      }
    });
  };
  getShareById = async ({
    shareId
  }: {
    shareId: number;
  }): Promise<GetShareByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_share_by_id: {
        share_id: shareId
      }
    });
  };
}
export interface InfluencerStocksInterface extends InfluencerStocksReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createStock: ({
    ticker
  }: {
    ticker: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  startAuction: ({
    stockId
  }: {
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  endAuction: ({
    stockId
  }: {
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  placeBid: ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class InfluencerStocksClient extends InfluencerStocksQueryClient implements InfluencerStocksInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createStock = this.createStock.bind(this);
    this.startAuction = this.startAuction.bind(this);
    this.endAuction = this.endAuction.bind(this);
    this.placeBid = this.placeBid.bind(this);
  }
  createStock = async ({
    ticker
  }: {
    ticker: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_stock: {
        ticker
      }
    }, fee_, memo_, funds_);
  };
  startAuction = async ({
    stockId
  }: {
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      start_auction: {
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  endAuction = async ({
    stockId
  }: {
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      end_auction: {
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  placeBid = async ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      place_bid: {
        price_per_share: pricePerShare,
        shares,
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
}