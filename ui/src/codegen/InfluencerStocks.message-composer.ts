/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "@cosmjs/cosmwasm-stargate";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, GetStocksResponse, Stock, GetBidByIdResponse, Bid, GetBidsResponse, GetMinimumBidPriceResponse, GetShareByIdResponse, Share, GetSharesResponse, GetStockByIdResponse } from "./InfluencerStocks.types";
export interface InfluencerStocksMsg {
  contractAddress: string;
  sender: string;
  createStock: ({
    ticker
  }: {
    ticker: string;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  startAuction: ({
    stockId
  }: {
    stockId: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  endAuction: ({
    stockId
  }: {
    stockId: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
  placeBid: ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, funds_?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class InfluencerStocksMsgComposer implements InfluencerStocksMsg {
  sender: string;
  contractAddress: string;
  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createStock = this.createStock.bind(this);
    this.startAuction = this.startAuction.bind(this);
    this.endAuction = this.endAuction.bind(this);
    this.placeBid = this.placeBid.bind(this);
  }
  createStock = ({
    ticker
  }: {
    ticker: string;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_stock: {
            ticker
          }
        })),
        funds: funds_
      })
    };
  };
  startAuction = ({
    stockId
  }: {
    stockId: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          start_auction: {
            stock_id: stockId
          }
        })),
        funds: funds_
      })
    };
  };
  endAuction = ({
    stockId
  }: {
    stockId: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          end_auction: {
            stock_id: stockId
          }
        })),
        funds: funds_
      })
    };
  };
  placeBid = ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, funds_?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          place_bid: {
            price_per_share: pricePerShare,
            shares,
            stock_id: stockId
          }
        })),
        funds: funds_
      })
    };
  };
}