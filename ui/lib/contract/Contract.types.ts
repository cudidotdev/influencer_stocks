/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export interface InstantiateMsg {}
export type ExecuteMsg = {
  create_stock: {
    ticker: string;
  };
} | {
  start_auction: {
    stock_id: number;
  };
} | {
  end_auction: {
    stock_id: number;
  };
} | {
  place_bid: {
    price_per_share: number;
    shares: number;
    stock_id: number;
  };
} | {
  create_buy_order: {
    price_per_share: number;
    shares: number;
    stock_id: number;
  };
} | {
  create_sell_order: {
    price_per_share: number;
    shares: number;
    stock_id: number;
  };
} | {
  cancel_buy_order: {
    buy_order_id: number;
  };
} | {
  cancel_sell_order: {
    sell_order_id: number;
  };
} | {
  quick_sell: {
    price_per_share: number;
    shares: number;
    slippage: number;
    stock_id: number;
  };
} | {
  quick_buy: {
    shares: number;
    slippage: number;
    stock_id: number;
  };
};
export type QueryMsg = {
  get_stock_by_id: {
    stock_id: number;
  };
} | {
  get_all_stocks: {
    in_auction?: boolean | null;
    in_sale?: boolean | null;
    marked_as_active_auction?: boolean | null;
    start_after?: number | null;
  };
} | {
  get_stocks_by_influencer: {
    influencer: Addr;
    start_after?: number | null;
  };
} | {
  get_bids_by_bidder: {
    bidder: Addr;
    is_active?: boolean | null;
    is_open?: boolean | null;
    stock_id?: number | null;
  };
} | {
  get_open_bids_by_stock: {
    stock_id: number;
  };
} | {
  get_bids_by_stock: {
    stock_id: number;
  };
} | {
  get_bid_by_id: {
    bid_id: number;
  };
} | {
  get_minimum_bid_price: {
    shares_requested: number;
    stock_id: number;
  };
} | {
  get_shares_by_stock: {
    stock_id: number;
  };
} | {
  get_shares_by_owner: {
    owner: Addr;
  };
} | {
  get_share_by_id: {
    share_id: number;
  };
} | {
  get_sell_price: {
    requested_shares: number;
    stock_id: number;
  };
} | {
  get_buy_price: {
    requested_shares: number;
    stock_id: number;
  };
} | {
  get_open_buy_orders_by_stock: {
    sort_by: OrderSort;
    stock_id: number;
  };
} | {
  get_open_buy_orders_by_owner: {
    owner: Addr;
    sort_by: OrderSort;
  };
} | {
  get_buy_order_by_id: {
    buy_order_id: number;
  };
} | {
  get_open_sell_orders_by_stock: {
    sort_by: OrderSort;
    stock_id: number;
  };
} | {
  get_open_sell_orders_by_owner: {
    owner: Addr;
    sort_by: OrderSort;
  };
} | {
  get_sell_order_by_id: {
    sell_order_id: number;
  };
} | {
  get_total_sell_volume: {
    stock_id: number;
  };
} | {
  get_total_buy_volume: {
    stock_id: number;
  };
} | {
  get_sales_by_stock: {
    stock_id: number;
  };
} | {
  get_sales_by_id: {
    sale_id: number;
  };
} | {
  get_sales_by_user: {
    user: Addr;
  };
};
export type Addr = string;
export type OrderSort = "price_asc" | "price_desc" | "created_at_asc" | "created_at_desc";
export interface GetStocksResponse {
  stocks: Stock[];
}
export interface Stock {
  auction_end?: number | null;
  auction_start?: number | null;
  created_at: number;
  id: number;
  influencer: Addr;
  marked_as_active_auction: boolean;
  ticker: string;
  total_shares: number;
  [k: string]: unknown;
}
export interface GetBidByIdResponse {
  bid: Bid;
}
export interface Bid {
  active: boolean;
  bidder: Addr;
  created_at: number;
  id: number;
  open: number;
  price_per_share: number;
  remaining_shares: number;
  shares_requested: number;
  stock_id: number;
  [k: string]: unknown;
}
export interface GetBidsResponse {
  bids: Bid[];
}
export interface GetBuyOrderByIdResponse {
  order: BuyOrder;
}
export interface BuyOrder {
  bought_shares: number;
  created_at: number;
  id: number;
  owner: Addr;
  price_per_share: number;
  requested_shares: number;
  resolved_at?: number | null;
  stock_id: number;
  [k: string]: unknown;
}
export interface GetBuyPriceResponse {
  price_per_share: string;
  requested_shares: number;
  total_price: string;
}
export interface GetMinimumBidPriceResponse {
  min_price: string;
  shares_requested: number;
}
export interface GetSellPriceResponse {
  price_per_share: string;
  requested_shares: number;
  total_price: string;
}
export interface GetBuyOrdersResponse {
  orders: BuyOrder[];
}
export interface GetSaleByIdResponse {
  sale: Sale;
}
export interface Sale {
  created_at: number;
  from: Addr;
  id: number;
  no_of_shares: number;
  price_per_share: number;
  stock_id: number;
  to: Addr;
  [k: string]: unknown;
}
export interface GetSalesResponse {
  sales: Sale[];
}
export interface GetSalesByUserResponse {
  buy: Sale[];
  sell: Sale[];
}
export interface GetSellOrderByIdResponse {
  order: SellOrder;
}
export interface SellOrder {
  available_shares: number;
  created_at: number;
  id: number;
  owner: Addr;
  price_per_share: number;
  resolved_at?: number | null;
  sold_shares: number;
  stock_id: number;
  [k: string]: unknown;
}
export interface GetShareByIdResponse {
  share: Share;
}
export interface Share {
  id: number;
  no_of_shares: number;
  owner: Addr;
  stock_id: number;
  [k: string]: unknown;
}
export interface GetSharesResponse {
  shares: Share[];
}
export interface GetStockByIdResponse {
  stock: Stock;
}
export interface GetTotalBuyVolumeResponse {
  amount: number;
}
export interface GetTotalSellVolumeResponse {
  amount: number;
}