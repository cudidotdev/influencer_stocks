/**
* This file was automatically generated by @cosmwasm/ts-codegen@1.12.1.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Addr, OrderSort, GetStocksResponse, Stock, GetBidByIdResponse, Bid, GetBidsResponse, GetBuyOrderByIdResponse, BuyOrder, GetBuyPriceResponse, GetMinimumBidPriceResponse, GetSellPriceResponse, GetBuyOrdersResponse, GetSaleByIdResponse, Sale, GetSalesResponse, GetSalesByUserResponse, GetSellOrderByIdResponse, SellOrder, GetShareByIdResponse, Share, GetSharesResponse, GetStockByIdResponse, GetTotalBuyVolumeResponse, GetTotalSellVolumeResponse } from "./Contract.types";
export interface ContractReadOnlyInterface {
  contractAddress: string;
  getStockById: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetStockByIdResponse>;
  getAllStocks: ({
    inAuction,
    inSale,
    markedAsActiveAuction,
    startAfter
  }: {
    inAuction?: boolean;
    inSale?: boolean;
    markedAsActiveAuction?: boolean;
    startAfter?: number;
  }) => Promise<GetStocksResponse>;
  getStocksByInfluencer: ({
    influencer,
    startAfter
  }: {
    influencer: Addr;
    startAfter?: number;
  }) => Promise<GetStocksResponse>;
  getBidsByBidder: ({
    bidder,
    isActive,
    isOpen,
    stockId
  }: {
    bidder: Addr;
    isActive?: boolean;
    isOpen?: boolean;
    stockId?: number;
  }) => Promise<GetBidsResponse>;
  getOpenBidsByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetBidsResponse>;
  getBidsByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetBidsResponse>;
  getBidById: ({
    bidId
  }: {
    bidId: number;
  }) => Promise<GetBidByIdResponse>;
  getMinimumBidPrice: ({
    sharesRequested,
    stockId
  }: {
    sharesRequested: number;
    stockId: number;
  }) => Promise<GetMinimumBidPriceResponse>;
  getSharesByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetSharesResponse>;
  getSharesByOwner: ({
    owner
  }: {
    owner: Addr;
  }) => Promise<GetSharesResponse>;
  getShareById: ({
    shareId
  }: {
    shareId: number;
  }) => Promise<GetShareByIdResponse>;
  getSellPrice: ({
    requestedShares,
    stockId
  }: {
    requestedShares: number;
    stockId: number;
  }) => Promise<GetSellPriceResponse>;
  getBuyPrice: ({
    requestedShares,
    stockId
  }: {
    requestedShares: number;
    stockId: number;
  }) => Promise<GetBuyPriceResponse>;
  getOpenBuyOrdersByStock: ({
    sortBy,
    stockId
  }: {
    sortBy: OrderSort;
    stockId: number;
  }) => Promise<GetBuyOrdersResponse>;
  getOpenBuyOrdersByOwner: ({
    owner,
    sortBy
  }: {
    owner: Addr;
    sortBy: OrderSort;
  }) => Promise<GetSellPriceResponse>;
  getBuyOrderById: ({
    buyOrderId
  }: {
    buyOrderId: number;
  }) => Promise<GetBuyOrderByIdResponse>;
  getOpenSellOrdersByStock: ({
    sortBy,
    stockId
  }: {
    sortBy: OrderSort;
    stockId: number;
  }) => Promise<GetSellPriceResponse>;
  getOpenSellOrdersByOwner: ({
    owner,
    sortBy
  }: {
    owner: Addr;
    sortBy: OrderSort;
  }) => Promise<GetSellPriceResponse>;
  getSellOrderById: ({
    sellOrderId
  }: {
    sellOrderId: number;
  }) => Promise<GetSellOrderByIdResponse>;
  getTotalSellVolume: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetTotalSellVolumeResponse>;
  getTotalBuyVolume: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetTotalBuyVolumeResponse>;
  getSalesByStock: ({
    stockId
  }: {
    stockId: number;
  }) => Promise<GetSalesResponse>;
  getSalesById: ({
    saleId
  }: {
    saleId: number;
  }) => Promise<GetSaleByIdResponse>;
  getSalesByUser: ({
    user
  }: {
    user: Addr;
  }) => Promise<GetSalesByUserResponse>;
}
export class ContractQueryClient implements ContractReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;
  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.getStockById = this.getStockById.bind(this);
    this.getAllStocks = this.getAllStocks.bind(this);
    this.getStocksByInfluencer = this.getStocksByInfluencer.bind(this);
    this.getBidsByBidder = this.getBidsByBidder.bind(this);
    this.getOpenBidsByStock = this.getOpenBidsByStock.bind(this);
    this.getBidsByStock = this.getBidsByStock.bind(this);
    this.getBidById = this.getBidById.bind(this);
    this.getMinimumBidPrice = this.getMinimumBidPrice.bind(this);
    this.getSharesByStock = this.getSharesByStock.bind(this);
    this.getSharesByOwner = this.getSharesByOwner.bind(this);
    this.getShareById = this.getShareById.bind(this);
    this.getSellPrice = this.getSellPrice.bind(this);
    this.getBuyPrice = this.getBuyPrice.bind(this);
    this.getOpenBuyOrdersByStock = this.getOpenBuyOrdersByStock.bind(this);
    this.getOpenBuyOrdersByOwner = this.getOpenBuyOrdersByOwner.bind(this);
    this.getBuyOrderById = this.getBuyOrderById.bind(this);
    this.getOpenSellOrdersByStock = this.getOpenSellOrdersByStock.bind(this);
    this.getOpenSellOrdersByOwner = this.getOpenSellOrdersByOwner.bind(this);
    this.getSellOrderById = this.getSellOrderById.bind(this);
    this.getTotalSellVolume = this.getTotalSellVolume.bind(this);
    this.getTotalBuyVolume = this.getTotalBuyVolume.bind(this);
    this.getSalesByStock = this.getSalesByStock.bind(this);
    this.getSalesById = this.getSalesById.bind(this);
    this.getSalesByUser = this.getSalesByUser.bind(this);
  }
  getStockById = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetStockByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_stock_by_id: {
        stock_id: stockId
      }
    });
  };
  getAllStocks = async ({
    inAuction,
    inSale,
    markedAsActiveAuction,
    startAfter
  }: {
    inAuction?: boolean;
    inSale?: boolean;
    markedAsActiveAuction?: boolean;
    startAfter?: number;
  }): Promise<GetStocksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_all_stocks: {
        in_auction: inAuction,
        in_sale: inSale,
        marked_as_active_auction: markedAsActiveAuction,
        start_after: startAfter
      }
    });
  };
  getStocksByInfluencer = async ({
    influencer,
    startAfter
  }: {
    influencer: Addr;
    startAfter?: number;
  }): Promise<GetStocksResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_stocks_by_influencer: {
        influencer,
        start_after: startAfter
      }
    });
  };
  getBidsByBidder = async ({
    bidder,
    isActive,
    isOpen,
    stockId
  }: {
    bidder: Addr;
    isActive?: boolean;
    isOpen?: boolean;
    stockId?: number;
  }): Promise<GetBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bids_by_bidder: {
        bidder,
        is_active: isActive,
        is_open: isOpen,
        stock_id: stockId
      }
    });
  };
  getOpenBidsByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_open_bids_by_stock: {
        stock_id: stockId
      }
    });
  };
  getBidsByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetBidsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bids_by_stock: {
        stock_id: stockId
      }
    });
  };
  getBidById = async ({
    bidId
  }: {
    bidId: number;
  }): Promise<GetBidByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_bid_by_id: {
        bid_id: bidId
      }
    });
  };
  getMinimumBidPrice = async ({
    sharesRequested,
    stockId
  }: {
    sharesRequested: number;
    stockId: number;
  }): Promise<GetMinimumBidPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_minimum_bid_price: {
        shares_requested: sharesRequested,
        stock_id: stockId
      }
    });
  };
  getSharesByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetSharesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_shares_by_stock: {
        stock_id: stockId
      }
    });
  };
  getSharesByOwner = async ({
    owner
  }: {
    owner: Addr;
  }): Promise<GetSharesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_shares_by_owner: {
        owner
      }
    });
  };
  getShareById = async ({
    shareId
  }: {
    shareId: number;
  }): Promise<GetShareByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_share_by_id: {
        share_id: shareId
      }
    });
  };
  getSellPrice = async ({
    requestedShares,
    stockId
  }: {
    requestedShares: number;
    stockId: number;
  }): Promise<GetSellPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sell_price: {
        requested_shares: requestedShares,
        stock_id: stockId
      }
    });
  };
  getBuyPrice = async ({
    requestedShares,
    stockId
  }: {
    requestedShares: number;
    stockId: number;
  }): Promise<GetBuyPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_buy_price: {
        requested_shares: requestedShares,
        stock_id: stockId
      }
    });
  };
  getOpenBuyOrdersByStock = async ({
    sortBy,
    stockId
  }: {
    sortBy: OrderSort;
    stockId: number;
  }): Promise<GetBuyOrdersResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_open_buy_orders_by_stock: {
        sort_by: sortBy,
        stock_id: stockId
      }
    });
  };
  getOpenBuyOrdersByOwner = async ({
    owner,
    sortBy
  }: {
    owner: Addr;
    sortBy: OrderSort;
  }): Promise<GetSellPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_open_buy_orders_by_owner: {
        owner,
        sort_by: sortBy
      }
    });
  };
  getBuyOrderById = async ({
    buyOrderId
  }: {
    buyOrderId: number;
  }): Promise<GetBuyOrderByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_buy_order_by_id: {
        buy_order_id: buyOrderId
      }
    });
  };
  getOpenSellOrdersByStock = async ({
    sortBy,
    stockId
  }: {
    sortBy: OrderSort;
    stockId: number;
  }): Promise<GetSellPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_open_sell_orders_by_stock: {
        sort_by: sortBy,
        stock_id: stockId
      }
    });
  };
  getOpenSellOrdersByOwner = async ({
    owner,
    sortBy
  }: {
    owner: Addr;
    sortBy: OrderSort;
  }): Promise<GetSellPriceResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_open_sell_orders_by_owner: {
        owner,
        sort_by: sortBy
      }
    });
  };
  getSellOrderById = async ({
    sellOrderId
  }: {
    sellOrderId: number;
  }): Promise<GetSellOrderByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sell_order_by_id: {
        sell_order_id: sellOrderId
      }
    });
  };
  getTotalSellVolume = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetTotalSellVolumeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_total_sell_volume: {
        stock_id: stockId
      }
    });
  };
  getTotalBuyVolume = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetTotalBuyVolumeResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_total_buy_volume: {
        stock_id: stockId
      }
    });
  };
  getSalesByStock = async ({
    stockId
  }: {
    stockId: number;
  }): Promise<GetSalesResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sales_by_stock: {
        stock_id: stockId
      }
    });
  };
  getSalesById = async ({
    saleId
  }: {
    saleId: number;
  }): Promise<GetSaleByIdResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sales_by_id: {
        sale_id: saleId
      }
    });
  };
  getSalesByUser = async ({
    user
  }: {
    user: Addr;
  }): Promise<GetSalesByUserResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_sales_by_user: {
        user
      }
    });
  };
}
export interface ContractInterface extends ContractReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createStock: ({
    ticker
  }: {
    ticker: string;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  startAuction: ({
    stockId
  }: {
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  endAuction: ({
    stockId
  }: {
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  placeBid: ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  createBuyOrder: ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  createSellOrder: ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cancelBuyOrder: ({
    buyOrderId
  }: {
    buyOrderId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  cancelSellOrder: ({
    sellOrderId
  }: {
    sellOrderId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  quickSell: ({
    pricePerShare,
    shares,
    slippage,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    slippage: number;
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
  quickBuy: ({
    shares,
    slippage,
    stockId
  }: {
    shares: number;
    slippage: number;
    stockId: number;
  }, fee_?: number | StdFee | "auto", memo_?: string, funds_?: Coin[]) => Promise<ExecuteResult>;
}
export class ContractClient extends ContractQueryClient implements ContractInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;
  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createStock = this.createStock.bind(this);
    this.startAuction = this.startAuction.bind(this);
    this.endAuction = this.endAuction.bind(this);
    this.placeBid = this.placeBid.bind(this);
    this.createBuyOrder = this.createBuyOrder.bind(this);
    this.createSellOrder = this.createSellOrder.bind(this);
    this.cancelBuyOrder = this.cancelBuyOrder.bind(this);
    this.cancelSellOrder = this.cancelSellOrder.bind(this);
    this.quickSell = this.quickSell.bind(this);
    this.quickBuy = this.quickBuy.bind(this);
  }
  createStock = async ({
    ticker
  }: {
    ticker: string;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_stock: {
        ticker
      }
    }, fee_, memo_, funds_);
  };
  startAuction = async ({
    stockId
  }: {
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      start_auction: {
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  endAuction = async ({
    stockId
  }: {
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      end_auction: {
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  placeBid = async ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      place_bid: {
        price_per_share: pricePerShare,
        shares,
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  createBuyOrder = async ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_buy_order: {
        price_per_share: pricePerShare,
        shares,
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  createSellOrder = async ({
    pricePerShare,
    shares,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_sell_order: {
        price_per_share: pricePerShare,
        shares,
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  cancelBuyOrder = async ({
    buyOrderId
  }: {
    buyOrderId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_buy_order: {
        buy_order_id: buyOrderId
      }
    }, fee_, memo_, funds_);
  };
  cancelSellOrder = async ({
    sellOrderId
  }: {
    sellOrderId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      cancel_sell_order: {
        sell_order_id: sellOrderId
      }
    }, fee_, memo_, funds_);
  };
  quickSell = async ({
    pricePerShare,
    shares,
    slippage,
    stockId
  }: {
    pricePerShare: number;
    shares: number;
    slippage: number;
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      quick_sell: {
        price_per_share: pricePerShare,
        shares,
        slippage,
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
  quickBuy = async ({
    shares,
    slippage,
    stockId
  }: {
    shares: number;
    slippage: number;
    stockId: number;
  }, fee_: number | StdFee | "auto" = "auto", memo_?: string, funds_?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      quick_buy: {
        shares,
        slippage,
        stock_id: stockId
      }
    }, fee_, memo_, funds_);
  };
}